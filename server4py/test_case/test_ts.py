from unittest import TestCase
from app.container.ts import ts_pes_packet, pat_packet, pmt_packet
# from container import datas
from app.container import print_ts_packet


class TestTS_all(TestCase):

    def test_audio_pes_packet(self):
        expected_ret = bytes([
            0x47, 0x41, 0x01, 0x31,
            0x81, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff,
            # pes header
            # 0x0, 0x0,  0x1,  0xc0, 0x0, 0x30, 0x80, 0x80, 0x5,  0x21, 0x0,  0x1 ,  0x7, 0xd1
            0x00, 0x00, 0x01, 0xc0, 0x00, 0x30, 0x80, 0x80, 0x05, 0x21, 0x00, 0x01, 0x00, 0x01,
            # pes payload
            0xaf, 0x01, 0x21, 0x19, 0xd3, 0x40, 0x7d, 0x0b, 0x6d, 0x44, 0xae, 0x81, 0x08, 0x00, 0x89, 0xa0, 0x3e,
            0x85, 0xb6, 0x92, 0x57, 0x04, 0x80, 0x00, 0x5b, 0xb7, 0x78, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
            0x30, 0x00, 0x06, 0x00, 0x38])
        __TS_PACKET_SIZE = 188
        is_video = False
        is_keyframe = False
        es_buffer = bytes([0xaf, 0x01, 0x21, 0x19, 0xd3, 0x40, 0x7d, 0x0b, 0x6d, 0x44, 0xae, 0x81,
                           0x08, 0x00, 0x89, 0xa0, 0x3e, 0x85, 0xb6, 0x92, 0x57, 0x04, 0x80, 0x00, 0x5b, 0xb7,
                           0x78, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x30, 0x00, 0x06, 0x00, 0x38,
                           ])
        ts_packets_size, ts_packets = ts_pes_packet(es_buffer, is_video, is_keyframe, 0, 0)

        for i in range(0, len(ts_packets)):
            p = ts_packets[i]
            print("=" * 20)
            print('index', i)
            print_ts_packet(p)

    def test_video_pes_packet(self):
        es = bytearray()
        pts = 0
        with open('datas.txt', 'r') as f:
            r = f.readline()

            while len(r) != 0:
                if "#" in r or ']}' in r:
                    pass
                elif "{'pts'" in r:
                    end = r.index("'es'") - 1
                    pts = int(r[7:end])
                else:
                    for e in r.strip().split(','):
                        if len(e) == 0:
                            continue
                        es.append(int(e.strip(), base=16))

                r = f.readline()

        if len(es) == 0:
            raise BaseException("es 不能为空")
        __TS_PACKET_SIZE = 188
        is_video = True
        is_keyframe = True
        ts_packets_size, ts_packets = ts_pes_packet(es, is_video, is_keyframe, pts, pts - 20)
        # for i in range(0, len(ts_packets)):
        #     p = ts_packets[i]
        #     print("=" * 20)
        #     print('index', i)
        #     print_ts_packet(p)
        with open('001.ts', 'wb') as f:
            f.write(pat_packet())
            # f.write('\n')
            f.write(pmt_packet(is_video))
            for ts_packet in ts_packets:
                # f.write('\n')
                f.write(ts_packet)
