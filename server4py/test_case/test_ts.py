from unittest import TestCase
from app.codec import h264
from app.container import ts
import time
import asyncio
from queue import Queue


class TestTS_all(TestCase):

    def test_audio_pes_packet(self):
        expected_ret = bytes([
            0x47, 0x41, 0x01, 0x31,
            0x81, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff,
            # pes header
            # 0x0, 0x0,  0x1,  0xc0, 0x0, 0x30, 0x80, 0x80, 0x5,  0x21, 0x0,  0x1 ,  0x7, 0xd1
            0x00, 0x00, 0x01, 0xc0, 0x00, 0x30, 0x80, 0x80, 0x05, 0x21, 0x00, 0x01, 0x00, 0x01,
            # pes payload
            0xaf, 0x01, 0x21, 0x19, 0xd3, 0x40, 0x7d, 0x0b, 0x6d, 0x44, 0xae, 0x81, 0x08, 0x00, 0x89, 0xa0, 0x3e,
            0x85, 0xb6, 0x92, 0x57, 0x04, 0x80, 0x00, 0x5b, 0xb7, 0x78, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
            0x30, 0x00, 0x06, 0x00, 0x38])
        __TS_PACKET_SIZE = 188
        is_video = False
        is_keyframe = False
        es_buffer = bytes([0xaf, 0x01, 0x21, 0x19, 0xd3, 0x40, 0x7d, 0x0b, 0x6d, 0x44, 0xae, 0x81,
                           0x08, 0x00, 0x89, 0xa0, 0x3e, 0x85, 0xb6, 0x92, 0x57, 0x04, 0x80, 0x00, 0x5b, 0xb7,
                           0x78, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x30, 0x00, 0x06, 0x00, 0x38,
                           ])
        # ts_packets_size, ts_packets = ts_pes_packets(es_buffer, is_video, is_keyframe, 0, 0)
        #
        # for i in range(0, len(ts_packets)):
        #     p = ts_packets[i]
        #     print("=" * 20)
        #     print('index', i)
        #     print_ts_packet(p)

    def test_video_file(self):
        with h264.Parser(path='v_datas1.txt') as h264parser:
            fs = list()
            f = h264parser.next_frame()
            while f:
                fs.append(f)
                f = h264parser.next_frame()
            print("=" * 20)
            print('split elematry stream frame size  %d' % len(fs))
            with ts.Muxer() as muxer:
                for f in fs:
                    ts_packet_list = muxer.muxe(f)
                    muxer.write(ts_packet_list.payload)

    def setUp(self):
        super().setUp()
        self.muxer = ts.Muxer(strategy=ts.Strategy.WRITE_TO_MEMORY)
        self.q = Queue()

    async def consumer(self):
        path = '001.ts'
        print('consumer')
        while True:
            pass
            # f = self.q.get()
            # ts_packet_list = self.muxer.muxe(f)
            # self.muxer.write(ts_packet_list.payload)
            # # print([(ts_block.name, ts_block.duration) for ts_block in self.muxer.cache.buffer.values()])
            # self.q.task_done()

    def producer(self):
        print('producter')
        with h264.Parser(path='v_datas1.txt') as h264parser:
            f = h264parser.next_frame()
            while f:
                pass
                # self.q.put(f)
                # await asyncio.sleep(0.1)
                # time.sleep(1)
                # f = h264parser.next_frame()

    async def main(self):
        asyncio.create_task(self.consumer())
        print('cjf')

    def test_video_stream(self):
        loop = asyncio.get_event_loop()
        loop.run_until_complete(self.main())
        loop.close()
